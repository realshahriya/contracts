import { Address } from '@ton/core';
import { NetworkProvider } from '@ton/blueprint';
import * as fs from 'fs';
import * as path from 'path';
import * as readline from 'readline';

const rl = readline.createInterface({
    input: process.stdin,
    output: process.stdout
});

function getUserInput(question: string): Promise<string> {
    return new Promise((resolve) => {
        rl.question(question, (answer) => {
            resolve(answer.trim());
        });
    });
}

export async function run(provider: NetworkProvider) {
    console.log('üîß RezaToken Environment Setup');
    console.log('='.repeat(50));
    
    try {
        console.log('\nThis script will help you configure your .env file after deployment.');
        console.log('Make sure you have deployed your contract first using:');
        console.log('npx blueprint run deploytoken --testnet\n');
        
        // Get contract address
        const contractAddress = await getUserInput('Enter your deployed contract address: ');
        
        // Validate address format
        try {
            Address.parse(contractAddress);
        } catch (error) {
            console.log('‚ùå Invalid address format. Please check and try again.');
            rl.close();
            return;
        }
        
        // Get owner address
        const ownerAddress = await getUserInput('Enter your wallet address (owner): ');
        
        // Validate owner address format
        try {
            Address.parse(ownerAddress);
        } catch (error) {
            console.log('‚ùå Invalid owner address format. Please check and try again.');
            rl.close();
            return;
        }
        
        // Get network
        console.log('\nSelect network:');
        console.log('1. Testnet');
        console.log('2. Mainnet');
        const networkChoice = await getUserInput('Choose network (1-2): ');
        const network = networkChoice === '2' ? 'mainnet' : 'testnet';
        
        // Get gas setting
        const gasInput = await getUserInput('Enter default gas amount in TON (default: 0.05): ');
        const gas = gasInput || '0.05';
        
        // Create .env content
        const envContent = `# RezaToken Contract Configuration
# Generated by setup-env script

# Contract address
CONTRACT_ADDRESS=${contractAddress}

# Network configuration
NETWORK=${network}

# Gas settings (in TON)
DEFAULT_GAS=${gas}

# Owner address
OWNER_ADDRESS=${ownerAddress}

# Debug mode
DEBUG=true
`;
        
        // Write to .env file
        const envPath = path.join(__dirname, '.env');
        fs.writeFileSync(envPath, envContent);
        
        console.log('\n‚úÖ Environment configuration saved!');
        console.log(`üìÅ File: ${envPath}`);
        console.log('\nüìã Configuration:');
        console.log(`Contract: ${contractAddress}`);
        console.log(`Owner: ${ownerAddress}`);
        console.log(`Network: ${network}`);
        console.log(`Gas: ${gas} TON`);
        
        console.log('\nüöÄ You can now run other scripts:');
        console.log('‚Ä¢ npm start mint-tokens');
        console.log('‚Ä¢ npm start get-all-data');
        console.log('‚Ä¢ npm start address-exclusions');
        console.log('‚Ä¢ npm start transaction-limits');
        console.log('‚Ä¢ npm start wallet-operations');
        console.log('‚Ä¢ npm start script-runner');
        
    } catch (error) {
        console.error('‚ùå Setup failed:', error);
    } finally {
        rl.close();
    }
}